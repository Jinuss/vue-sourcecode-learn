{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"78616","rootPoint":{"objectClass":"CGPoint","x":360,"y":1012.5},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"MA84R","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"4DEOY","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"FRB1X","lineColorHex":"#DC306C","text":"Observer类","remark":"Object.defineProperty中的get()和set()可以对对象属性的读写进行拦截"},"1":{"objectClass":"MindNode","ID":"YI4U7","lineColorHex":"#DC306C","text":"Dep类","remark":"依赖收集管理器，在getter中收集依赖，在setter中统治依赖更新"},"2":{"objectClass":"MindNode","ID":"0PVMJ","lineColorHex":"#DC306C","text":"Watcher类","remark":"谁用到了数据，谁就是依赖，我们就为谁创建一个watcher实例。在之后数据变化时，我们不是直接去通知依赖更新，而是通知依赖对应的watch实例，由watcher实例去通知真正的视图"},"objectClass":"NSArray"},"text":"Object的变化侦测"},"1":{"objectClass":"MindNode","ID":"DTN23","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"PWQC5","lineColorHex":"#DC306C","text":"数组方法拦截器","remark":"数组方法拦截器：即在数组实例与Array.prototype之间，在拦截器内重写了操作数组的一些方法，当数组实例使用操作数组方法时，其实使用的是拦截器中重写的方法，而不是Array.prototype上的原生方法。\n如：push、pop、shift、unshift、splice、sort、reverse"},"1":{"objectClass":"MindNode","ID":"0331B","lineColorHex":"#DC306C","text":"深度侦测"},"objectClass":"NSArray"},"text":"Array的变化侦测"},"objectClass":"NSArray"},"text":"变化侦测","remark":"变化侦测：追踪状态，亦或者说是数据的变化，一旦发生了变化，就要更新视图"},"1":{"objectClass":"MindNode","ID":"C5NKO","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"JPGCI","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"WX357","lineColorHex":"#BF58F5","text":"元素节点"},"1":{"objectClass":"MindNode","ID":"E264E","lineColorHex":"#BF58F5","text":"文本节点"},"2":{"objectClass":"MindNode","ID":"3QH50","lineColorHex":"#BF58F5","text":"注释节点"},"3":{"objectClass":"MindNode","ID":"E1HME","lineColorHex":"#BF58F5","text":"组件节点"},"4":{"objectClass":"MindNode","ID":"5X11O","lineColorHex":"#BF58F5","text":"函数式组件节点"},"5":{"objectClass":"MindNode","ID":"G9157","lineColorHex":"#BF58F5","text":"克隆节点"},"objectClass":"NSArray"},"text":"VNode类","remark":"VNode的作用：template模版先编译成VNode并缓存下来，等数据发生变化需要重新渲染，就将前后的VNode进行对比，有差异的VNode是需要重新渲染的节点。"},"1":{"objectClass":"MindNode","ID":"T7W48","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"COQ8M","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"0BR80","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"DVZ8Y","lineColorHex":"#BF58F5","text":"元素节点"},"1":{"objectClass":"MindNode","ID":"4H061","lineColorHex":"#BF58F5","text":"文本节点"},"2":{"objectClass":"MindNode","ID":"FD8YE","lineColorHex":"#BF58F5","text":"注释节点"},"objectClass":"NSArray"},"text":"创建节点"},"1":{"objectClass":"MindNode","ID":"F08J2","lineColorHex":"#BF58F5","text":"删除节点"},"2":{"objectClass":"MindNode","ID":"LC55X","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"O6NFW","lineColorHex":"#BF58F5","text":"更新子节点","remark":"循环：外层为new VNode，内层为old VNode\n为了避免双重循环数据量大时间复杂度升高带来的性能问题，而选择了从子节点数组中的4个特殊位置互相比对，分别是：新前与旧前，新后与旧后，新后与旧前，新前与旧后"},"objectClass":"NSArray"},"text":"更新节点"},"objectClass":"NSArray"},"text":"patch","remark":"以新的VNode为基准，改造旧的VNode，使之成为跟新的VNode一样"},"objectClass":"NSArray"},"text":"DOM-Diff"},"objectClass":"NSArray"},"text":"虚拟DOM","remark":"虚拟DOM：用一个JS对象来描述一个DOM节点。用JS的计算性能来换取操作DOM所消耗的性能。只更新需要更新的地方。"},"2":{"objectClass":"MindNode","ID":"63VGP","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"PM620","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"E8OHP","lineColorHex":"#26BBFF","text":"模板字符串用正则等解析成抽象语法树AST"},"objectClass":"NSArray"},"text":"模板解析阶段"},"1":{"objectClass":"MindNode","ID":"7Z343","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"HY8ZE","lineColorHex":"#26BBFF","text":"遍历AST，给静态节点打上标记"},"objectClass":"NSArray"},"text":"优化阶段"},"2":{"objectClass":"MindNode","ID":"XV3KD","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"6E45Y","lineColorHex":"#26BBFF","text":"将AST转换成渲染函数render()"},"objectClass":"NSArray"},"text":"代码生成阶段"},"objectClass":"NSArray"},"text":"模版编译"},"3":{"objectClass":"MindNode","ID":"8I6Y4","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"QGQ2F","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"KYQKX","lineColorHex":"#37C45A","text":"创建实例：new Vue","remark":"合并配置，调用一些初始化函数，触发生命周期钩子函数，调用$mount开启下一个阶段"},"1":{"objectClass":"MindNode","ID":"UJQ59","lineColorHex":"#37C45A","text":"初始化生命周期：initLifecycle"},"2":{"objectClass":"MindNode","ID":"IT476","lineColorHex":"#37C45A","text":"初始化事件：initEvents","remark":"实例初始化阶段调用的初始化事件函数实际上初始化的是父组件在模板中使用v-on或@注册的监听子组件内触发的事件"},"3":{"objectClass":"MindNode","ID":"40DS6","lineColorHex":"#37C45A","text":"初始化inject选项:initInjections"},"4":{"objectClass":"MindNode","ID":"L5823","lineColorHex":"#37C45A","text":"初始化实例状态:initState"},"objectClass":"NSArray"},"text":"初始化阶段"},"1":{"objectClass":"MindNode","ID":"L2V7G","lineColorHex":"#37C45A","text":"模板编译阶段"},"2":{"objectClass":"MindNode","ID":"M26LQ","lineColorHex":"#37C45A","text":"挂载阶段"},"3":{"objectClass":"MindNode","ID":"CPGR3","lineColorHex":"#37C45A","text":"销毁阶段"},"objectClass":"NSArray"},"text":"生命周期"},"4":{"objectClass":"MindNode","ID":"EV09P","lineColorHex":"#1BD6E7","text":"实例方法"},"5":{"objectClass":"MindNode","ID":"B3D23","lineColorHex":"#FFC700","text":"全局API"},"6":{"objectClass":"MindNode","ID":"2KNGP","lineColorHex":"#DC306C","text":"过滤器"},"7":{"objectClass":"MindNode","ID":"RJ79C","lineColorHex":"#BF58F5","text":"指令"},"8":{"objectClass":"MindNode","ID":"3F2VR","lineColorHex":"#26BBFF","text":"内置组件"},"objectClass":"NSArray"},"text":"vue源码解析"},"ID":"502Q4"}